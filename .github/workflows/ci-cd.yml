# GitHub Actions CI/CD Pipeline for Mercato Trading Platform
# Automated testing, building, and deployment with enterprise-grade practices

name: Mercato CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: mercato/backend
  FRONTEND_IMAGE_NAME: mercato/frontend
  NODE_VERSION: '18'
  
jobs:
  # Test and Lint Jobs
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mercato_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: MercatoBackend/package.json
    
    - name: Install dependencies
      working-directory: ./MercatoBackend
      run: npm ci || npm install
    
    - name: Setup environment
      working-directory: ./MercatoBackend
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mercato_test" > .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "NODE_ENV=test" >> .env.test
    
    - name: Generate Prisma client
      working-directory: ./MercatoBackend
      run: npx prisma generate
    
    - name: Run database migrations
      working-directory: ./MercatoBackend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mercato_test
    
    - name: Run linting
      working-directory: ./MercatoBackend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./MercatoBackend
      run: npm run type-check
    
    - name: Run tests
      working-directory: ./MercatoBackend
      run: npm run test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mercato_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      working-directory: ./MercatoBackend
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mercato_test
        REDIS_URL: redis://localhost:6379

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      working-directory: ./MercatoFrontend
      run: npm ci || npm install
    
    - name: Run linting
      working-directory: ./MercatoFrontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./MercatoFrontend
      run: npm run type-check
    
    - name: Run tests
      working-directory: ./MercatoFrontend
      run: npm run test
    
    - name: Build application
      working-directory: ./MercatoFrontend
      run: npm run build

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js for auditing
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Run security audit (Backend)
      working-directory: ./MercatoBackend
      run: |
        npm install --package-lock-only || true
        npm audit --audit-level=moderate || true
    
    - name: Run security audit (Frontend)
      working-directory: ./MercatoFrontend
      run: |
        npm install --package-lock-only || true
        npm audit --audit-level=high || true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker build and push (only on main branch)
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./MercatoBackend
        file: ./MercatoBackend/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./MercatoFrontend
        file: ./MercatoFrontend/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Quality gates and reporting
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Backend tests: ${{ needs.test-backend.result }}"
        echo "Frontend tests: ${{ needs.test-frontend.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.test-backend.result }}" != "success" || 
              "${{ needs.test-frontend.result }}" != "success" || 
              "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Quality gates failed"
          exit 1
        else
          echo "✅ All quality gates passed"
        fi
