# GitHub Actions CI/CD Pipeline for Mercato Trading Platform
# Automated testing, building, and deployment with enterprise-grade practices

name: Mercato CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: mercato/backend
  FRONTEND_IMAGE_NAME: mercato/frontend
  NODE_VERSION: '18'
  
jobs:
  # Test and Lint Jobs
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mercato_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: MercatoBackend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./MercatoBackend
      run: npm ci
    
    - name: Setup environment
      working-directory: ./MercatoBackend
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mercato_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
    
    - name: Generate Prisma client
      working-directory: ./MercatoBackend
      run: npx prisma generate
    
    - name: Run database migrations
      working-directory: ./MercatoBackend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mercato_test
    
    - name: Run linting
      working-directory: ./MercatoBackend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./MercatoBackend
      run: npm run type-check
    
    - name: Run tests
      working-directory: ./MercatoBackend
      run: npm run test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mercato_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      working-directory: ./MercatoBackend
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mercato_test
        REDIS_URL: redis://localhost:6379

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: MercatoFrontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./MercatoFrontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./MercatoFrontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./MercatoFrontend
      run: npm run type-check
    
    - name: Run tests
      working-directory: ./MercatoFrontend
      run: npm run test
    
    - name: Build application
      working-directory: ./MercatoFrontend
      run: npm run build

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit (Backend)
      working-directory: ./MercatoBackend
      run: npm audit --audit-level=high
    
    - name: Run security audit (Frontend)
      working-directory: ./MercatoFrontend
      run: npm audit --audit-level=high
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and push Docker images
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [test-backend, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./MercatoBackend
        file: ./MercatoBackend/Dockerfile.optimized
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    needs: [test-frontend, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./MercatoFrontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
    
    - name: Deploy to staging
      run: |
        # Update image tags in deployment
        sed -i "s|mercato/backend:latest|${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:develop|g" infrastructure/k8s/staging.yaml
        sed -i "s|mercato/frontend:latest|${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:develop|g" infrastructure/k8s/staging.yaml
        
        # Apply manifests
        kubectl apply -f infrastructure/k8s/staging.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/mercato-backend -n mercato-staging --timeout=300s
        kubectl rollout status deployment/mercato-frontend -n mercato-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Get staging URL and run basic health checks
        BACKEND_URL=$(kubectl get ingress mercato-ingress -n mercato-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Health check
        curl -f http://${BACKEND_URL}/health || exit 1
        
        # Basic API test
        curl -f http://${BACKEND_URL}/api/monitoring/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
    
    - name: Deploy to production
      run: |
        # Update image tags in deployment
        sed -i "s|mercato/backend:latest|${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest|g" infrastructure/k8s/production.yaml
        sed -i "s|mercato/frontend:latest|${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest|g" infrastructure/k8s/production.yaml
        
        # Apply manifests
        kubectl apply -f infrastructure/k8s/production.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/mercato-backend -n mercato-prod --timeout=600s
        kubectl rollout status deployment/mercato-frontend -n mercato-prod --timeout=600s
    
    - name: Run production health checks
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Get production URL and run comprehensive health checks
        BACKEND_URL=$(kubectl get ingress mercato-ingress -n mercato-prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Health check
        curl -f https://${BACKEND_URL}/health || exit 1
        
        # System health
        curl -f https://${BACKEND_URL}/api/monitoring/health || exit 1
        
        # Market data check
        curl -f https://${BACKEND_URL}/api/monitoring/market || exit 1
    
    - name: Create GitHub release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Automated deployment of commit ${{ github.sha }}
          - Backend image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          - Frontend image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          
          ## Deployment Status
          ✅ Tests passed
          ✅ Security scans completed
          ✅ Images built and pushed
          ✅ Production deployment successful
        draft: false
        prerelease: false

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run load tests
      run: |
        # Install k6 for load testing
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Get staging URL
        STAGING_URL="https://staging.mercato.example.com"
        
        # Run performance tests
        k6 run --env BASE_URL=${STAGING_URL} tests/performance/load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: performance-results/
