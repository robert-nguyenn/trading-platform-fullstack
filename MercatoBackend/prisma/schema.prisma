generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Strategy {
  id                 String          @id @default(uuid())
  userId             String
  name               String
  description        String?
  isActive           Boolean         @default(false)
  rootBlockId        String?         @unique
  allocatedAmount    Float?          @default(0) // Amount user has allocated to this strategy
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  rootBlock          StrategyBlock?  @relation("StrategyRoot", fields: [rootBlockId], references: [id])
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  blocks             StrategyBlock[]
  backtestResults    BacktestResult[]
  performanceMetrics PerformanceMetrics[]
}

model StrategyBlock {
  id           String            @id @default(uuid())
  strategyId   String
  blockType    StrategyBlockType
  parameters   Json
  parentId     String?
  conditionId  String?
  actionId     String?
  order        Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  strategyRoot Strategy?         @relation("StrategyRoot")
  action       Action?           @relation(fields: [actionId], references: [id])
  condition    Condition?        @relation(fields: [conditionId], references: [id])
  parent       StrategyBlock?    @relation("BlockHierarchy", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  children     StrategyBlock[]   @relation("BlockHierarchy")
  strategy     Strategy          @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId])
  @@index([parentId])
  @@index([conditionId])
  @@index([actionId])
}

model Condition {
  id                String          @id @default(uuid())
  indicatorType     String
  dataSource        String?
  dataKey           String?
  symbol            String?
  interval          String?
  parameters        Json
  operator          Operator
  targetValue       Float?
  targetIndicatorId String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  targetIndicator   Condition?      @relation("ConditionComparison", fields: [targetIndicatorId], references: [id])
  comparisonSource  Condition[]     @relation("ConditionComparison")
  strategyBlocks    StrategyBlock[]

  @@index([indicatorType, symbol, interval])
}

model Action {
  id             String          @id @default(uuid())
  actionType     ActionType
  parameters     Json
  order          Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  strategyBlocks StrategyBlock[]
}

model User {
  id                 String     @id
  email              String     @unique
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  tradingId          String?    @unique
  strategies         Strategy[]
  portfolioHistory   PortfolioHistory[]
  performanceMetrics PerformanceMetrics[]
}

enum StrategyBlockType {
  ROOT
  WEIGHT
  ASSET
  GROUP
  CONDITION_IF
  FILTER
  ACTION
}

enum Operator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  CROSSES_ABOVE
  CROSSES_BELOW
}

enum ActionType {
  BUY
  SELL
  NOTIFY
  REBALANCE
  LOG_MESSAGE
}

model PolymarketEvent {
  id           Int      @id
  ticker       String?  
  slug         String? 
  question     String? 
  description  String?  
  image        String?  
  active       Boolean?  
  closed       Boolean  
  startDate    DateTime  
  endDate      DateTime?  
  volume       Float  
  liquidity    Float  
  tags         Json  
  rawData      Json  
  fetchedAt    DateTime @default(now())
}

model MacroEvent {
  id             String   @id
  type           String   // INFLATION, EMPLOYMENT, GEOPOLITICAL, MONETARY_POLICY, ECONOMIC_INDICATOR
  title          String
  content        String
  source         String
  timestamp      DateTime
  impact         String   // HIGH, MEDIUM, LOW
  sentiment      String   // POSITIVE, NEGATIVE, NEUTRAL
  relevantAssets Json     // Array of asset symbols
  embedding      Json?    // Vector embedding for RAG
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  tradeSignals   TradeSignal[]
  
  @@index([type, timestamp])
  @@index([impact])
}

model TradeSignal {
  id          String      @id
  eventId     String
  asset       String
  action      String      // BUY, SELL, HOLD
  confidence  Float       // 0.0 to 1.0
  reasoning   String
  timeframe   String      // 1d, 1w, 1m
  impact      String      // HIGH, MEDIUM, LOW
  generatedAt DateTime
  createdAt   DateTime    @default(now())
  
  // Relations
  event       MacroEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@index([asset, generatedAt])
  @@index([action, confidence])
}

model BacktestResult {
  id               String   @id @default(uuid())
  strategyId       String
  startDate        DateTime
  endDate          DateTime
  initialCapital   Float
  finalValue       Float
  totalReturn      Float
  annualizedReturn Float
  sharpeRatio      Float?
  maxDrawdown      Float?
  winRate          Float?
  totalTrades      Int      @default(0)
  winningTrades    Int      @default(0)
  losingTrades     Int      @default(0)
  avgWin           Float?
  avgLoss          Float?
  parameters       Json     // Backtest configuration
  trades           Json     // Individual trade records
  metrics          Json     // Additional performance metrics
  createdAt        DateTime @default(now())
  
  // Relations
  strategy         Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  
  @@index([strategyId, createdAt])
}

model PortfolioHistory {
  id           String   @id @default(uuid())
  userId       String
  timestamp    DateTime
  totalValue   Float
  cash         Float
  positions    Json     // Position details
  dayChange    Float?
  dayChangePercent Float?
  unrealizedPnl Float?
  realizedPnl  Float?
  createdAt    DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
}

model PerformanceMetrics {
  id                String   @id @default(uuid())
  strategyId        String
  userId            String
  date              DateTime
  totalValue        Float
  dayReturn         Float
  cumulativeReturn  Float
  sharpeRatio       Float?
  volatility        Float?
  maxDrawdown       Float?
  beta              Float?
  alpha             Float?
  sortino           Float?
  calmar            Float?
  var95             Float?   // Value at Risk 95%
  var99             Float?   // Value at Risk 99%
  createdAt         DateTime @default(now())
  
  // Relations
  strategy          Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([strategyId, date])
  @@index([userId, date])
  @@unique([strategyId, date])
}