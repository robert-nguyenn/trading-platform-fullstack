# Deployment Configuration for Mercato Trading Platform
# Production-ready setup with monitoring, scaling, and security

apiVersion: v1
kind: Namespace
metadata:
  name: mercato-prod
  labels:
    app: mercato
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mercato-config
  namespace: mercato-prod
data:
  NODE_ENV: "production"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  # Database and API keys should be in secrets, not configmap

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: mercato-secrets
  namespace: mercato-prod
type: Opaque
stringData:
  DATABASE_URL: "postgresql://user:password@postgres-service:5432/mercato_prod"
  ALPACA_BROKER_API_KEY: "your-alpaca-key"
  ALPACA_BROKER_API_SECRET: "your-alpaca-secret"
  ALPACA_API_BASE_URL: "https://paper-api.alpaca.markets"
  ALPACA_IS_PAPER: "true"
  FRED_API_KEY: "your-fred-api-key"
  OPENAI_API_KEY: "your-openai-api-key"
  FIREBASE_PROJECT_ID: "your-firebase-project"
  FIREBASE_CLIENT_EMAIL: "your-firebase-email"
  FIREBASE_PRIVATE_KEY: "your-firebase-private-key"

---
# PostgreSQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: mercato-prod
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: mercato_prod
        - name: POSTGRES_USER
          value: user
        - name: POSTGRES_PASSWORD
          value: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: mercato-prod
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: mercato-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: mercato-prod
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Backend Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mercato-backend
  namespace: mercato-prod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mercato-backend
  template:
    metadata:
      labels:
        app: mercato-backend
    spec:
      containers:
      - name: backend
        image: mercato/backend:latest
        ports:
        - containerPort: 3002
        env:
        - name: PORT
          value: "3002"
        envFrom:
        - configMapRef:
            name: mercato-config
        - secretRef:
            name: mercato-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: mercato-backend-service
  namespace: mercato-prod
spec:
  selector:
    app: mercato-backend
  ports:
  - port: 80
    targetPort: 3002
  type: ClusterIP

---
# Frontend Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mercato-frontend
  namespace: mercato-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mercato-frontend
  template:
    metadata:
      labels:
        app: mercato-frontend
    spec:
      containers:
      - name: frontend
        image: mercato/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.mercato.example.com"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: mercato-frontend-service
  namespace: mercato-prod
spec:
  selector:
    app: mercato-frontend
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mercato-ingress
  namespace: mercato-prod
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - mercato.example.com
    - api.mercato.example.com
    secretName: mercato-tls
  rules:
  - host: mercato.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mercato-frontend-service
            port:
              number: 80
  - host: api.mercato.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mercato-backend-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler for backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mercato-backend-hpa
  namespace: mercato-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mercato-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mercato-frontend-hpa
  namespace: mercato-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mercato-frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mercato-network-policy
  namespace: mercato-prod
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: mercato-prod
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: mercato-prod
  - to: [] # Allow external API calls (Alpaca, FRED, etc.)
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
